---
export const prerender = true;

import AnimatedBackground from '../../components/AnimatedBackground.astro';
import BrowseContent from '../../components/BrowseContent.astro';
import FloatingNavigation from '../../components/FloatingNavigation.astro';
import specialistsData from '../../data/specialists.json';
import '../../styles/global.css';
import type { Specialist } from '../../types';
import type { GetStaticPathsOptions } from 'astro';

interface StatePageData {
  state: string;
  specialists: Specialist[];
  count: number;
}

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const specialists = Object.values(specialistsData) as Specialist[];
  
  // Group specialists by state
  const specialistsByState = specialists.reduce((acc: Record<string, Specialist[]>, specialist: Specialist) => {
    // Skip specialists without address or state
    if (!specialist || !specialist.address || !specialist.address.state) {
      return acc;
    }
    
    const state = specialist.address.state;
    if (!acc[state]) {
      acc[state] = [];
    }
    acc[state].push(specialist);
    return acc;
  }, {});
  
  // Convert to array format for pagination
  const statesArray: StatePageData[] = Object.entries(specialistsByState).map(([state, specialists]) => ({
    state,
    specialists: specialists as Specialist[], // Cast specialists to Specialist[]
    count: specialists.length
  }));
  
  // Sort states alphabetically
  statesArray.sort((a, b) => a.state.localeCompare(b.state));
  
  // Paginate with 10 states per page
  return paginate(statesArray, {
    pageSize: 10
  });
}

interface AstroProps {
  page: {
    data: StatePageData[];
    currentPage: number;
    lastPage: number;
    url: {
      current: string;
    };
  };
}

const { page } = Astro.props as AstroProps;
const { data: states, currentPage, lastPage } = page;

const stateFilter = Astro.url.searchParams.get('state');

console.log('stateFilter:', stateFilter);
console.log('Initial states from page.data:', states.map(s => s.state));

let filteredStates = states;
if (stateFilter) {
  filteredStates = states.filter(s => s.state === stateFilter);
  console.log('Filtered states:', filteredStates.map(s => s.state));
}

// Create pagination URLs
const baseUrl = '/browse';
const queryParam = stateFilter ? `?state=${encodeURIComponent(stateFilter)}` : '';

const prevUrl = currentPage > 1 ? (currentPage === 2 ? `${baseUrl}${queryParam}` : `${baseUrl}/${currentPage - 1}${queryParam}`) : null;
const nextUrl = currentPage < lastPage ? `${baseUrl}/${currentPage + 1}${queryParam}` : null;

// Convert back to object format for BrowseContent component
const specialistsByState: Record<string, Specialist[]> = filteredStates.reduce((acc: Record<string, Specialist[]>, { state, specialists }) => {
  acc[state] = specialists;
  return acc;
}, {});

const pageTitle = stateFilter 
  ? `Watch Repair Specialists in ${stateFilter} - Page ${currentPage} | Chrono-Finder Directory`
  : `Browse Watch Repair Specialists - Page ${currentPage} | Chrono-Finder Directory`;

const pageDescription = stateFilter
  ? `Browse our directory of master watch repair specialists and certified horologists in ${stateFilter}. Page ${currentPage} of ${lastPage}. Find expert timepiece restoration services near you.`
  : `Browse our directory of master watch repair specialists and certified horologists. Page ${currentPage} of ${lastPage}. Find expert timepiece restoration services near you.`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Roboto:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Pagination links for SEO -->
    {prevUrl && <link rel="prev" href={prevUrl} />}
    {nextUrl && <link rel="next" href={nextUrl} />}
  </head>
  <body>
    <AnimatedBackground />
    
    <main class="relative z-10 min-h-screen">
      <BrowseContent 
        specialistsByState={specialistsByState}
        currentPage={currentPage}
        totalPages={lastPage}
        prevUrl={prevUrl}
        nextUrl={nextUrl}
        stateFilter={stateFilter}
      />
    </main>
    
    <FloatingNavigation />
  </body>
</html>
