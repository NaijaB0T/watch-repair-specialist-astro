---
import type { Specialist } from '../types'; // Import Specialist type

export interface Props {
  specialistsByState: Record<string, Specialist[]>; // Correctly type specialistsByState
  currentPage?: number;
  totalPages?: number;
  prevUrl?: string | null;
  nextUrl?: string | null;
  stateFilter?: string | null; // Add stateFilter prop
}

const { 
  specialistsByState, 
  currentPage = 1, 
  totalPages = 1, 
  prevUrl, 
  nextUrl,
  stateFilter
} = Astro.props;

function createSlug(name: string): string {
  return name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
}
---

<div class="container mx-auto px-4 py-8 relative z-10">
  <!-- Breadcrumb -->
  <nav class="mb-8 text-sm">
    <ol class="flex items-center space-x-2">
      <li>
        <a href="/" class="text-primary hover:text-primary-light transition-colors">Home</a>
      </li>
      <li class="text-gray-500">/</li>
      <li>
        <a href="/browse/1" class="text-primary hover:text-primary-light transition-colors">Browse All Specialists</a>
      </li>
      {stateFilter && (
        <>
          <li class="text-gray-500">/</li>
          <li class="text-gray-300">{stateFilter}</li>
        </>
      )}
    </ol>
  </nav>
  
  <h1 class="text-4xl md:text-5xl font-display mb-8 gradient-text">
    {stateFilter ? `Watch Repair Specialists in ${stateFilter}` : 'Browse All Watch Repair Specialists'}
  </h1>
  
  <!-- States and Specialists -->
  {Object.entries(specialistsByState).map(([state, specialists]) => (
    <div class="mb-12"> {/* Removed key */}
      <h2 class="text-2xl md:text-3xl font-display text-primary mb-6 pb-2 border-b border-primary/30">
        {state}
      </h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {specialists.map((specialist) => (
          <div class="card p-6 transform hover:-translate-y-1 transition-all duration-300"> {/* Removed key */}
            <h3 class="text-xl font-display text-primary mb-3">
              {specialist.name ?? 'N/A'}
            </h3>
            
            {specialist.rating !== null && specialist.review_count !== null && ( // Check for nulls
              <div class="flex items-center mb-3">
                <div class="flex text-yellow-400">
                  {[...Array(5)].map((_, i) => (
                    <svg 
                      class={`w-5 h-5 ${i < Math.floor(specialist.rating ?? 0) ? 'fill-current' : 'stroke-current fill-none'}`}
                      viewBox="0 0 24 24"
                    >
                      <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                  ))}
                </div>
                <span class="ml-2 text-gray-400">
                  {specialist.rating ?? 'N/A'} ({specialist.review_count ?? 'N/A'} reviews)
                </span>
              </div>
            )}
            
            {specialist.address && (
              <div class="text-gray-400 mb-4 space-y-1">
                {(specialist.address.city || specialist.address.state) && (
                  <p class="flex items-center">
                    <svg class="w-4 h-4 mr-2 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    {specialist.address.city ?? ''}{((specialist.address.city && specialist.address.city !== '') && (specialist.address.state && specialist.address.state !== '')) ? ', ' : ''}{specialist.address.state ?? ''}
                  </p>
                )}
                
                {specialist.phone && (
                  <p class="flex items-center">
                    <svg class="w-4 h-4 mr-2 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                    </svg>
                    {specialist.phone}
                  </p>
                )}
              </div>
            )}
            
            <a 
              href={`/specialist/${specialist.unique_id}/${createSlug(specialist.name ?? '')}`}
              class="btn-secondary block text-center"
            >
              View Full Profile
            </a>
          </div>
        ))}
      </div>
    </div>
  ))}
  
  <!-- Pagination -->
  {totalPages > 1 && (
    <div class="mt-12 flex justify-center items-center gap-4">
      {prevUrl ? (
        <a href={prevUrl} class="btn-primary">
          Previous
        </a>
      ) : (
        <button disabled class="btn-primary opacity-50 cursor-not-allowed">
          Previous
        </button>
      )}
      
      <span class="text-gray-300 font-medium">
        Page {currentPage} of {totalPages}
      </span>
      
      {nextUrl ? (
        <a href={nextUrl} class="btn-primary">
          Next
        </a>
      ) : (
        <button disabled class="btn-primary opacity-50 cursor-not-allowed">
          Next
        </button>
      )}
    </div>
  )}
</div>
